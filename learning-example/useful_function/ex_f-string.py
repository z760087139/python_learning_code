# python 3.6 新增字符串格式化方式
# 大括号内不支持\符号，需要使用时需要在变量内写好


num = 10.9
print(f'my id is {num}')
# 格式化部分
# {content:format} content 是变量内容， format是格式化格式
# < 左对齐
# > 右对齐
# ^ 居中
# + 正负数前加符号 / - 负数前加符号，正数不加
# 空格 负数前加符号，正数前带空格
# # 切换数字显示格式 如 二进制，八进制等


# 宽度和精度相关
# 0width.precision 0表示高位补0，width是宽度
# width.precision 用于不同格式类型的浮点数、复数时的含义也不同：用于 f、F、e、E 和 % 时 precision 指定的是小数点后的位数，
# 用于 g 和 G 时 precision 指定的是有效数字位数（小数点前位数+小数点后位数）。 
# 除浮点数、复数外还可用于字符串，此时 precision 含义是只使用字符串中前 precision 位字符。
print(f'my id is {num}')

# 千分位
# , / _ 用 , 或者 _ 分隔
# , 仅适用于浮点数、复数与十进制整数：对于浮点数和复数，, 只分隔小数点前的数位。
# _ 适用于浮点数、复数与二、八、十、十六进制整数：对于浮点数和复数，_ 只分隔小数点前的数位；
# 对于二、八、十六进制整数，固定从低位到高位每隔四位插入一个 _（十进制整数是每隔三位插入一个 _）。
# >>> a = 1234567890.098765
# >>> f'a is {a:f}'
# 'a is 1234567890.098765'
# >>> f'a is {a:,f}'
# 'a is 1,234,567,890.098765'
# >>> f'a is {a:_f}'
# 'a is 1_234_567_890.098765'

# >>> b = 1234567890
# >>> f'b is {b:_b}'
# 'b is 100_1001_1001_0110_0000_0010_1101_0010'
# >>> f'b is {b:_o}'
# 'b is 111_4540_1322'
# >>> f'b is {b:_d}'
# 'b is 1_234_567_890'
# >>> f'b is {b:_x}'
# 'b is 4996_02d2'


# 格式描述符	含义与作用	适用变量类型
# s	普通字符串格式	字符串
# b	二进制整数格式	整数
# c	字符格式，按unicode编码将整数转换为对应字符	整数
# d	十进制整数格式	整数
# o	八进制整数格式	整数
# x	十六进制整数格式（小写字母）	整数
# X	十六进制整数格式（大写字母）	整数
# e	科学计数格式，以 e 表示 ×10^	浮点数、复数、整数（自动转换为浮点数）
# E	与 e 等价，但以 E 表示 ×10^	浮点数、复数、整数（自动转换为浮点数）
# f	定点数格式，默认精度（precision）是6	浮点数、复数、整数（自动转换为浮点数）
# F	与 f 等价，但将 nan 和 inf 换成 NAN 和 INF	浮点数、复数、整数（自动转换为浮点数）
# g	通用格式，小数用 f，大数用 e	浮点数、复数、整数（自动转换为浮点数）
# G	与 G 等价，但小数用 F，大数用 E	浮点数、复数、整数（自动转换为浮点数）
# %	百分比格式，数字自动乘上100后按 f 格式排版，并加 % 后缀	浮点数、整数（自动转换为浮点数）
